(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{288:function(_,s,r){_.exports=r.p+"assets/img/promise.1b21b271.png"},335:function(_,s,r){"use strict";r.r(s);var e=r(10),t=Object(e.a)({},(function(){var _=this,s=_._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[s("h2",{attrs:{id:"_2-1promise是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1promise是什么"}},[_._v("#")]),_._v(" 2.1promise是什么")]),_._v(" "),s("h3",{attrs:{id:"_2-1-1理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1理解"}},[_._v("#")]),_._v(" 2.1.1理解")]),_._v(" "),s("ol",[s("li",[s("p",[_._v("抽象表达：")]),_._v(" "),s("ol",[s("li",[s("p",[_._v("promise是一门新的技术（ES6规范）")])]),_._v(" "),s("li",[s("p",[_._v("promise是js中进行异步编程的新解决方案")]),_._v(" "),s("p",[_._v("备注：旧方案是单纯使用回调函数")])])])]),_._v(" "),s("li",[s("p",[_._v("具体表达：")]),_._v(" "),s("ol",[s("li",[_._v("从语法上来说：promise是一个构造函数")]),_._v(" "),s("li",[_._v("从功能上来说：promise对象用来封装一个异步操作并可以获取其成功/失败的结果值")])])])]),_._v(" "),s("h3",{attrs:{id:"_2-1-2-promise-的状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-promise-的状态"}},[_._v("#")]),_._v(" 2.1.2 Promise 的状态")]),_._v(" "),s("ol",[s("li",[_._v("pemding 变为resolved")]),_._v(" "),s("li",[_._v("pending变为rejected")])]),_._v(" "),s("p",[s("strong",[_._v("说明")]),_._v("只有这2种，且一个promise对象只能改变一次 无论变为成功还是失败，都会有一个结果数据 成功的结果数据一般称为value 失败的结果一般称为reason")]),_._v(" "),s("p",[_._v("实例对象种的一个属性[PromoseState]")]),_._v(" "),s("ul",[s("li",[s("p",[_._v("pending 未决定的")])]),_._v(" "),s("li",[s("p",[_._v("resolved/fullfilled 成功")])]),_._v(" "),s("li",[s("p",[_._v("rejected 失败")])])]),_._v(" "),s("h3",{attrs:{id:"_2-1-3promise对象的值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3promise对象的值"}},[_._v("#")]),_._v(" 2.1.3Promise对象的值")]),_._v(" "),s("p",[_._v("实例对象中的另一个属性[PromiseResult]")]),_._v(" "),s("p",[_._v("保存着异步任务 [成功/失败]的结果")]),_._v(" "),s("ul",[s("li",[_._v("resolve")]),_._v(" "),s("li",[_._v("reject")])]),_._v(" "),s("h3",{attrs:{id:"_2-1-4promise基本流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4promise基本流程"}},[_._v("#")]),_._v(" 2.1.4Promise基本流程")]),_._v(" "),s("p",[s("img",{attrs:{src:r(288),alt:"Alt text"}})]),_._v(" "),s("h2",{attrs:{id:"_2-2为什么要用promise"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2为什么要用promise"}},[_._v("#")]),_._v(" 2.2为什么要用Promise")]),_._v(" "),s("h3",{attrs:{id:"_2-2-1指定回调函数的方式更加灵活"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1指定回调函数的方式更加灵活"}},[_._v("#")]),_._v(" 2.2.1指定回调函数的方式更加灵活")]),_._v(" "),s("ol",[s("li",[_._v("旧的：必须在启动异步任务前指定")]),_._v(" "),s("li",[_._v("promise：启动异步任务 =>返回promise对象 =>给promise对象绑定回调函数（甚至可以在异步任务结束后指定/多个）")])]),_._v(" "),s("h3",{attrs:{id:"_2-2-2支持链式调用-可以解决回调地狱问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2支持链式调用-可以解决回调地狱问题"}},[_._v("#")]),_._v(" 2.2.2支持链式调用，可以解决回调地狱问题")]),_._v(" "),s("ol",[s("li",[s("p",[_._v("什么是回调地狱？")]),_._v(" "),s("p",[_._v("回调函数嵌套使用，外部回调函数异步执行的结果是嵌套的回调执行的条件")])]),_._v(" "),s("li",[s("p",[_._v("回调地狱的缺点？")]),_._v(" "),s("p",[_._v("不便于阅读")]),_._v(" "),s("p",[_._v("不便于异常处理")])]),_._v(" "),s("li",[s("p",[_._v("解决方案？")])])]),_._v(" "),s("p",[_._v("​\t\tpromise链式调用")])])}),[],!1,null,null,null);s.default=t.exports}}]);