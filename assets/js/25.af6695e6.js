(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{308:function(t,v,_){"use strict";_.r(v);var a=_(10),r=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("起步\nGit基础\nGithub\nGit分支")]),t._v(" "),v("h1",{attrs:{id:"起步-关于版本控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#起步-关于版本控制"}},[t._v("#")]),t._v(" 起步-关于版本控制")]),t._v(" "),v("h2",{attrs:{id:"文件的版本"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文件的版本"}},[t._v("#")]),t._v(" 文件的版本")]),t._v(" "),v("p",[t._v("操作麻烦\t每次都需要复制→粘贴→重命名\n命名不规范\t无法通过文件名知道具体做了哪些修改\n容易丢失\t如果硬盘故障或不小心删除，文件很容易丢失\n协作困难\t需要手动合并每个人对项目文件的修改，合并时极易出错")]),t._v(" "),v("h2",{attrs:{id:"版本控制软件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#版本控制软件"}},[t._v("#")]),t._v(" 版本控制软件")]),t._v(" "),v("p",[t._v("概念\n版本控制软件是一个用来记录文件变化，以便将来查阅特定版本修订情况的系统，因此有时也叫做“版本控制系统”。\n版本控制软件\n通俗的理解\n把手工管理文件版本的方式，改为由软件管理文件的版本;这个负责管理文件版本的软件，叫做“版本控制软件”。")]),t._v(" "),v("h2",{attrs:{id:"使用版本控制软件的好处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#使用版本控制软件的好处"}},[t._v("#")]),t._v(" 使用版本控制软件的好处")]),t._v(" "),v("p",[v("strong",[t._v("操作简便")]),t._v("\n只需识记几组简单的终端命令，即可快速上手常见的版本控制软件")]),t._v(" "),v("p",[v("strong",[t._v("易于对比")])]),t._v(" "),v("p",[t._v("基于版本控制软件提供的功能，能够方便地比较文件的变化细节，从而查找出导致问题的原因")]),t._v(" "),v("p",[v("strong",[t._v("易于回溯")]),t._v("\n可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态")]),t._v(" "),v("p",[v("strong",[t._v("不易丢失")]),t._v("\n在版本控制软件中，被用户误删除的文件，可以轻松的恢复回来")]),t._v(" "),v("p",[v("strong",[t._v("协作方便")]),t._v("\n基于版本控制软件提供的分支功能，可以轻松实现多人协作开发时的代码合并操作")]),t._v(" "),v("h2",{attrs:{id:"版本控制系统的分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#版本控制系统的分类"}},[t._v("#")]),t._v(" 版本控制系统的分类")]),t._v(" "),v("p",[v("strong",[t._v("分布式版本控制系统")]),t._v("\n联网运行，支持多人协作开发;性能优秀、用户体验好\n"),v("strong",[t._v("集中化的版本控制系统")]),t._v("\n联网运行，支持多人协作开发;性能差、用户体验不好\n"),v("strong",[t._v("本地版本控制系统")]),t._v("\n单机运行，使维护文件版本的操作工具化")]),t._v(" "),v("h2",{attrs:{id:"本地版本控制系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#本地版本控制系统"}},[t._v("#")]),t._v(" 本地版本控制系统")]),t._v(" "),v("p",[t._v("特点:\n使用软件来记录文件的不同版本，提高了工作效率，降低了手动维护版本的出错率\n缺点:\n单机运行，不支持多人协作开发版本数据库故障后，所有历史更新记录会丢失")]),t._v(" "),v("h2",{attrs:{id:"集中化的版本控制系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集中化的版本控制系统"}},[t._v("#")]),t._v(" 集中化的版本控制系统")]),t._v(" "),v("p",[t._v("特点:基于服务器、客户端的运行模式服务器保存文件的所有更新记录客户端只保留最新的文件版本\n优点:联网运行，支持多人协作开发\n缺点:\n不支持离线提交版本更新")]),t._v(" "),v("p",[t._v("中心服务器崩溃后，所有人无法正常工作\n版本数据库故障后,所有历史更新记录会丢失")]),t._v(" "),v("p",[t._v("典型代表:SVN")]),t._v(" "),v("h2",{attrs:{id:"分布式版本控制系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式版本控制系统"}},[t._v("#")]),t._v(" 分布式版本控制系统")]),t._v(" "),v("p",[t._v("特点:基于服务器、客户端的运行模式\n服务器保存文件的所有更新版本\n客户端是服务器的完整备份，并不是只保留文件的最新版本\n优点:\n联网运行，支持多人协作开发\n客户端断网后支持离线本地提交版本更新\n服务器故障或损坏后，可使用任何一个客户端的备份进行恢复")]),t._v(" "),v("p",[t._v("典型代表:Git")]),t._v(" "),v("h2",{attrs:{id:"起步-git-基础概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#起步-git-基础概念"}},[t._v("#")]),t._v(" 起步-Git 基础概念")]),t._v(" "),v("p",[t._v("什么是 Git\nGit是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效地!从很小到非常大的项目版本管理。\n特点:项目越大越复杂，协同开发者越多，越能体现出Git的高性能和高可用性!")]),t._v(" "),v("p",[t._v("Git的特性\nGit 之所以快速和高效，主要依赖于它的如下两个特性:")]),t._v(" "),v("p",[t._v("直接记录快照，而非差异比较\n近乎所有操作都是本地执行")]),t._v(" "),v("h2",{attrs:{id:"svn的差异比较"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#svn的差异比较"}},[t._v("#")]),t._v(" SVN的差异比较")]),t._v(" "),v("p",[t._v("传统的版本控制系统（例如SVN)是基于差异的版本控制，它们存储的是一组基本文件和每个文件随时间逐步累积的差异。\n好处:节省磁盘空间缺点:耗时、效率低")]),t._v(" "),v("p",[t._v("在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件。")]),t._v(" "),v("h2",{attrs:{id:"git的记录快照"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git的记录快照"}},[t._v("#")]),t._v(" Git的记录快照")]),t._v(" "),v("p",[t._v("Git快照是在原有文件版本的基础上重新生成一份新的文件，类似于备份。为了效率，如果文件没有修改，Git不再重新存储该文件，而是只保留一个链接指向之前存储的文件。")]),t._v(" "),v("p",[t._v("缺点:占用磁盘空间较大\n优点:版本切换时非常快，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可。")]),t._v(" "),v("p",[t._v("特点:空间换时间")]),t._v(" "),v("h2",{attrs:{id:"近乎所有操作都是本地执行"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#近乎所有操作都是本地执行"}},[t._v("#")]),t._v(" 近乎所有操作都是本地执行")]),t._v(" "),v("p",[t._v("在Git中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。")]),t._v(" "),v("p",[t._v("特性:\n断网后依旧可以在本地对项目进行版本管理")]),t._v(" "),v("p",[t._v("联网后，把本地修改的记录同步到云端服务器即可")]),t._v(" "),v("h1",{attrs:{id:"git基础概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git基础概念"}},[t._v("#")]),t._v(" Git基础概念")]),t._v(" "),v("h2",{attrs:{id:"git中的三个区域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git中的三个区域"}},[t._v("#")]),t._v(" Git中的三个区域")]),t._v(" "),v("p",[t._v("使用Git管理的项目，拥有三个区域，分别是工作区、暂存区、Git仓库。")]),t._v(" "),v("h2",{attrs:{id:"git-中的三种状态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git-中的三种状态"}},[t._v("#")]),t._v(" Git 中的三种状态")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("已修改modified")]),t._v(" "),v("th",[t._v("已暂存staged")]),t._v(" "),v("th",[t._v("已提交committed")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("已修改：表示修改了文件，但还没将修改的结果放到暂存区")]),t._v(" "),v("td",[t._v("已暂存：表示对已修改文件的当前版本做了标记，使之包含在下次提交的列表中")]),t._v(" "),v("td",[t._v("已提交：表示文件已经安全地保存在本地的Git 仓库中")])])])]),t._v(" "),v("p",[t._v("注意:\n工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。")]),t._v(" "),v("p",[t._v("如果文件已修改并放入暂存区，就属于已暂存状态。\n如果Git仓库中保存着特定版本的文件，就属于已提交状态。")]),t._v(" "),v("h2",{attrs:{id:"基本的git工作流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本的git工作流程"}},[t._v("#")]),t._v(" 基本的Git工作流程")]),t._v(" "),v("p",[t._v("基本的Git工作流程如下:\nWorking Directory")]),t._v(" "),v("p",[t._v("Stage Fixes暂存修改")]),t._v(" "),v("p",[t._v("Staging Area")]),t._v(" "),v("p",[t._v("Commit提交更新")]),t._v(" "),v("p",[t._v(".git directory")]),t._v(" "),v("p",[t._v("基本的 Git工作流程如下:")]),t._v(" "),v("p",[t._v("在工作区中修改文件\n将你想要下次提交的更改进行暂存\n提交更新，找到暂存区的文件，将快照永久性存储到Git仓库")])])}),[],!1,null,null,null);v.default=r.exports}}]);